!function(){"use strict";function e(e,t){return t={exports:{}},e(t,t.exports),t.exports}function t(e){for(var t=[],n=0;n<5;n++)n+.5===e?t.push(c("i.fa.fa-star-half-o")):n<e?t.push(c("i.fa.fa-star")):t.push(c("i.fa.fa-star-o"));return t}function n(e){return e.toLowerCase().indexOf("mov")>=0?"Movies":e.toLowerCase().indexOf("show")>=0?"Shows":""}function r(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(e){return"%"+e.charCodeAt(0).toString(16)})}function o(e,t,n){$(e).fadeOut({delay:650,duration:1800},{complete:function(){}})}function i(e,t,n,r){return function(o,i,u){function s(e){return e.attrs||(e.attrs={}),c=e.attrs.config,e.attrs.config=l,e}function l(o,i,u){function s(){var e=r?o:o.cloneNode(!0),n=null;f&&d&&f.parentNode===d&&(n=f),Y=!0,setTimeout(function(){Y=!1},0),d.insertBefore(e,n),t(e,function(){d.contains(e)&&d.removeChild(e)},u)}var l,p;return c&&(l=c(o,i,u),p=u.onunload),i||((e&&n||Y)&&e(o,a,u),u.onunload=t?p?function(){s(),p()}:s:p,d=o.parentElement,f=o.nextSibling),l}var c,d,f;return o.nodeType?l(o,i,u):o.attrs?s(o):o.view?{controller:o.controller||a,view:function(e){return s(o.view(e))}}:void 0}}function a(){}function u(e,t,n){e=$(e);var r="-100%";window.globals.previousPageLevel<window.globals.currentPageLevel&&(r="100%"),e.css({position:"absolute",left:r}),console.log("window.globals.previousPageLevel:",window.globals.previousPageLevel),console.log("window.globals.currentPageLevel:",window.globals.currentPageLevel),window.globals.previousPageLevel!==window.globals.currentPageLevel?(e.css({transition:"left .3s ease-in-out"}),console.log("trans")):(console.log("didnt trans"),t()),setTimeout(function(){e.css({left:"0%"})},1),e[0].addEventListener("transitionend",t,!1)}function s(e,t,n){e=$(e),e.css({position:"absolute",left:0}),window.globals.previousPageLevel=parseInt(e.attr("pagelevel")),window.globals.previousPageLevel!==window.globals.currentPageLevel?e.css({transition:"left .3s ease-in-out"}):t();var r="100%";window.globals.previousPageLevel<window.globals.currentPageLevel&&(r="-100%"),setTimeout(function(){e.css({left:r})},1),e[0].addEventListener("transitionend",t,!1)}var l="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},c=e(function(e){!function(t,n){var r=n(t);"object"==typeof e&&null!=e&&e.exports?e.exports=r:"function"==typeof define&&define.amd?define(function(){return r}):t.m=r}("undefined"!=typeof window?window:l,function(e,t){function n(e){return"function"==typeof e}function r(e){return"[object Object]"===Le.call(e)}function o(e){return"[object String]"===Le.call(e)}function i(){}function a(e){Ee=e.document,Ce=e.location,Te=e.cancelAnimationFrame||e.clearTimeout,Se=e.requestAnimationFrame||e.setTimeout}function u(e,t){for(var n,r=[],o=/(?:(^|#|\.)([^#\.\[\]]+))|(\[.+?\])/g;n=o.exec(t);)if(""===n[1]&&n[2])e.tag=n[2];else if("#"===n[1])e.attrs.id=n[2];else if("."===n[1])r.push(n[2]);else if("["===n[3][0]){var i=/\[(.+?)(?:=("|'|)(.*?)\2)?\]/.exec(n[3]);e.attrs[i[1]]=i[3]||""}return r}function s(e,t){var n=t?e.slice(1):e;return 1===n.length&&Ne(n[0])?n[0]:n}function l(e,t,n){var r="class"in t?"class":"className";for(var o in t)De.call(t,o)&&(o===r&&null!=t[o]&&""!==t[o]?(n.push(t[o]),e[o]=""):e[o]=t[o]);n.length&&(e[r]=n.join(" "))}function c(e,t){for(var n=[],i=1,a=arguments.length;i<a;i++)n[i-1]=arguments[i];if(r(e))return re(e,n);if(!o(e))throw new Error("selector in m(selector, attrs, children) should be a string");var c=null!=t&&r(t)&&!("tag"in t||"view"in t||"subtree"in t),d=c?t:{},f={tag:"div",attrs:{},children:s(n,c)};return l(f.attrs,d,u(f,e)),f}function d(e,t){for(var n=0;n<e.length&&!t(e[n],n++););}function f(e,t){d(e,function(e,n){return(e=e&&e.attrs)&&null!=e.key&&t(e,n)})}function p(e){try{if(null!=e&&null!=e.toString())return e}catch(e){}return""}function h(e,t,n,r){try{m(e,t,n),t.nodeValue=r}catch(e){}}function v(e){for(var t=0;t<e.length;t++)Ne(e[t])&&(e=e.concat.apply([],e),t--);return e}function m(e,t,n){e.insertBefore(t,e.childNodes[n]||null)}function g(e,t,n,r){f(e,function(e,r){t[e=e.key]=t[e]?{action:Ae,index:r,from:t[e].index,element:n.nodes[t[e].index]||Ee.createElement("div")}:{action:Oe,index:r}});var o=[];for(var i in t)De.call(t,i)&&o.push(t[i]);var a=o.sort(F),u=new Array(n.length);return u.nodes=n.nodes.slice(),d(a,function(t){var o=t.index;if(t.action===Ie&&(Y(n[o].nodes,n[o]),u.splice(o,1)),t.action===Oe){var i=Ee.createElement("div");i.key=e[o].attrs.key,m(r,i,o),u.splice(o,0,{attrs:{key:e[o].attrs.key},nodes:[i]}),u.nodes[o]=i}if(t.action===Ae){var a=t.element,s=r.childNodes[o];s!==a&&null!==a&&r.insertBefore(a,s||null),u[o]=n[t.from],u.nodes[o]=a}}),u}function w(e,t,n,r){var o=e.length!==t.length;return o||f(e,function(e,n){var r=t[n];return o=r&&r.attrs&&r.attrs.key!==e.key}),o?g(e,n,t,r):t}function y(e,t,n){d(e,function(e,r){null!=t[r]&&n.push.apply(n,t[r].nodes)}),d(t.nodes,function(e,r){null!=e.parentNode&&n.indexOf(e)<0&&Y([e],[t[r]])}),e.length<t.length&&(t.length=e.length),t.nodes=n}function b(e){var t=0;f(e,function(){return d(e,function(e){(e=e&&e.attrs)&&null==e.key&&(e.key="__mithril__"+t++)}),1})}function k(e,t,n){return e.tag!==t.tag||(n.sort().join()!==Object.keys(t.attrs).sort().join()||(e.attrs.id!==t.attrs.id||(e.attrs.key!==t.attrs.key||("all"===c.redraw.strategy()?!t.configContext||t.configContext.retain!==!0:"diff"===c.redraw.strategy()&&(t.configContext&&t.configContext.retain===!1)))))}function x(e,t,r){k(e,t,r)&&(t.nodes.length&&Y(t.nodes),t.configContext&&n(t.configContext.onunload)&&t.configContext.onunload(),t.controllers&&d(t.controllers,function(e){e.onunload&&e.onunload({preventDefault:i})}))}function E(e,t){return e.attrs.xmlns?e.attrs.xmlns:"svg"===e.tag?"http://www.w3.org/2000/svg":"math"===e.tag?"http://www.w3.org/1998/Math/MathML":t}function C(e,t,n){n.length&&(e.views=t,e.controllers=n,d(n,function(e){if(e.onunload&&e.onunload.$old&&(e.onunload=e.onunload.$old),je&&e.onunload){var t=e.onunload;e.onunload=i,e.onunload.$old=t}}))}function S(e,t,r,o,i){if(n(t.attrs.config)){var a=i.configContext=i.configContext||{};e.push(function(){return t.attrs.config.call(t,r,!o,a,i)})}}function T(e,n,r,o,i,a,u,s){var l=e.nodes[0];return o&&K(l,n.tag,n.attrs,e.attrs,i),e.children=z(l,n.tag,t,t,n.children,e.children,!1,0,n.attrs.contenteditable?l:r,i,u),e.nodes.intact=!0,s.length&&(e.views=a,e.controllers=s),l}function D(e,t,n){var r;e.$trusted?r=Z(t,n,e):(r=[Ee.createTextNode(e)],t.nodeName in Pe||m(t,r[0],n));var o;return o="string"==typeof e||"number"==typeof e||"boolean"==typeof e?new e.constructor(e):e,o.nodes=r,o}function L(e,t,n,r,o,i){var a=t.nodes;return r&&r===Ee.activeElement||(e.$trusted?(Y(a,t),a=Z(n,o,e)):"textarea"===i?n.value=e:r?r.innerHTML=e:((1===a[0].nodeType||a.length>1||a[0].nodeValue.trim&&!a[0].nodeValue.trim())&&(Y(t.nodes,t),a=[Ee.createTextNode(e)]),h(n,a[0],o,e))),t=new e.constructor(e),t.nodes=a,t}function N(e,t,n,r,o,i,a){return e.nodes.length?e.valueOf()!==t.valueOf()||o?L(t,e,r,i,n,a):(e.nodes.intact=!0,e):D(t,r,n)}function P(e){if(e.$trusted){var t=e.match(/<[^\/]|\>\s*[^<]/g);if(null!=t)return t.length}else if(Ne(e))return e.length;return 1}function I(e,n,r,o,i,a,u,s,l){e=v(e);var c=[],d=n.length===e.length,p=0,h={},m=!1;f(n,function(e,t){m=!0,h[n[t].attrs.key]={action:Ie,index:t}}),b(e),m&&(n=w(e,n,h,r));for(var g=0,k=0,x=e.length;k<x;k++){var E=z(r,i,n,o,e[k],n[g],a,o+p||p,u,s,l);E!==t&&(d=d&&E.nodes.intact,p+=P(E),n[g++]=E)}return d||y(e,n,c),n}function O(e,t,n,r,o){if(null!=t){if(Le.call(t)===Le.call(e))return t;if(o&&o.nodes){var i=n-r,a=i+(Ne(e)?e:t.nodes).length;Y(o.nodes.slice(i,a),o.slice(i,a))}else t.nodes&&Y(t.nodes,t)}return t=new e.constructor,t.tag&&(t={}),t.nodes=[],t}function A(e,t){return e.attrs.is?null==t?Ee.createElement(e.tag,e.attrs.is):Ee.createElementNS(t,e.tag,e.attrs.is):null==t?Ee.createElement(e.tag):Ee.createElementNS(t,e.tag)}function j(e,t,n,r){return r?K(t,e.tag,e.attrs,{},n):e.attrs}function _(e,n,r,o,i,a){return null!=e.children&&e.children.length>0?z(n,e.tag,t,t,e.children,r.children,!0,0,e.attrs.contenteditable?n:o,i,a):e.children}function R(e,t,n,r,o,i,a){var u={tag:e.tag,attrs:t,children:n,nodes:[r]};return C(u,i,a),u.children&&!u.children.nodes&&(u.children.nodes=[]),"select"===e.tag&&"value"in e.attrs&&K(r,e.tag,{value:e.attrs.value},{},o),u}function M(e,t,r,o){var i;return i="diff"===c.redraw.strategy()&&e?e.indexOf(t):-1,i>-1?r[i]:n(o)?new o:{}}function q(e,t,n,r){null!=r.onunload&&Re.map(function(e){return e.handler}).indexOf(r.onunload)<0&&Re.push({controller:r,handler:r.onunload}),e.push(n),t.push(r)}function U(e,t,n,r,o,i){var a=M(n.views,t,r,e.controller),u=e&&e.attrs&&e.attrs.key;return e=0===je||Me||r&&r.indexOf(a)>-1?e.view(a):{tag:"placeholder"},"retain"===e.subtree?e:(e.attrs=e.attrs||{},e.attrs.key=u,q(i,o,t,a),e)}function B(e,t,n,r){for(var o=t&&t.controllers;null!=e.view;)e=U(e,e.view.$original||e.view,t,o,r,n);return e}function H(e,t,n,r,i,a,u,s){var l=[],c=[];if(e=B(e,t,l,c),"retain"===e.subtree)return t;if(!e.tag&&c.length)throw new Error("Component template must return a virtual element, not an array, string, etc.");e.attrs=e.attrs||{},t.attrs=t.attrs||{};var d=Object.keys(e.attrs),f=d.length>("key"in e.attrs?1:0);if(x(e,t,d),o(e.tag)){var p=0===t.nodes.length;u=E(e,u);var h;if(p){h=A(e,u);var v=j(e,h,u,f);m(r,h,i);var g=_(e,h,t,n,u,s);t=R(e,v,g,h,u,l,c)}else h=T(t,e,n,f,u,l,s,c);return p||a!==!0||null==h||m(r,h,i),S(s,e,h,p,t),t}}function z(e,t,o,i,a,u,s,l,c,d,f){return a=p(a),"retain"===a.subtree?u:(u=O(a,u,l,i,o),Ne(a)?I(a,u,e,l,t,s,c,d,f):null!=a&&r(a)?H(a,u,c,e,l,s,d,f):n(a)?u:N(u,a,l,e,s,c,t))}function F(e,t){return e.action-t.action||e.index-t.index}function $(e,t,n){for(var r in t)De.call(t,r)&&(null!=n&&n[r]===t[r]||(e.style[r]=t[r]));for(r in n)De.call(n,r)&&(De.call(t,r)||(e.style[r]=""))}function G(e,t,o,i,a,u){if("config"===t||"key"===t)return!0;if(n(o)&&"on"===t.slice(0,2))e[t]=ee(o,e);else if("style"===t&&null!=o&&r(o))$(e,o,i);else if(null!=u)"href"===t?e.setAttributeNS("http://www.w3.org/1999/xlink","href",o):e.setAttribute("className"===t?"class":t,o);else if(t in e&&!qe[t])try{"input"===a&&e[t]===o||(e[t]=o)}catch(n){e.setAttribute(t,o)}else e.setAttribute(t,o)}function J(e,t,n,r,o,i,a){if(t in o&&r===n&&Ee.activeElement!==e)"value"===t&&"input"===i&&e.value!==n&&(e.value=n);else{o[t]=n;try{return G(e,t,n,r,i,a)}catch(e){if(e.message.indexOf("Invalid argument")<0)throw e}}}function K(e,t,n,r,o){for(var i in n)!De.call(n,i)||!J(e,i,n[i],r[i],r,t,o);return r}function Y(e,t){for(var n=e.length-1;n>-1;n--)if(e[n]&&e[n].parentNode){try{e[n].parentNode.removeChild(e[n])}catch(e){}t=[].concat(t),t[n]&&V(t[n])}e.length&&(e.length=0)}function V(e){e.configContext&&n(e.configContext.onunload)&&(e.configContext.onunload(),e.configContext.onunload=null),e.controllers&&d(e.controllers,function(e){n(e.onunload)&&e.onunload({preventDefault:i})}),e.children&&(Ne(e.children)?d(e.children,V):e.children.tag&&V(e.children))}function Q(e,t){try{e.appendChild(Ee.createRange().createContextualFragment(t))}catch(n){e.insertAdjacentHTML("beforeend",t),W(e)}}function W(e){if("SCRIPT"===e.tagName)e.parentNode.replaceChild(X(e),e);else{var t=e.childNodes;if(t&&t.length)for(var n=0;n<t.length;n++)W(t[n])}return e}function X(e){for(var t=document.createElement("script"),n=e.attributes,r=0;r<n.length;r++)t.setAttribute(n[r].name,n[r].value);return t.text=e.innerHTML,t}function Z(e,t,n){var r=e.childNodes[t];if(r){var o=1!==r.nodeType,i=Ee.createElement("span");o?(e.insertBefore(i,r||null),i.insertAdjacentHTML("beforebegin",n),e.removeChild(i)):r.insertAdjacentHTML("beforebegin",n)}else Q(e,n);for(var a=[];e.childNodes[t]!==r;)a.push(e.childNodes[t]),t++;return a}function ee(e,t){return function(n){n=n||event,c.redraw.strategy("diff"),c.startComputation();try{return e.call(t,n)}finally{ue()}}}function te(e){var t=Be.indexOf(e);return t<0?Be.push(e)-1:t}function ne(e){function t(){return arguments.length&&(e=arguments[0]),e}return t.toJSON=function(){return e},t}function re(e,t){function n(){return(e.controller||i).apply(this,t)||this}function r(n){for(var r=[n].concat(t),o=1;o<arguments.length;o++)r.push(arguments[o]);return e.view.apply(e,r)}e.controller&&(n.prototype=e.controller.prototype),r.$original=e.view;var o={controller:n,view:r};return t[0]&&null!=t[0].key&&(o.attrs={key:t[0].key}),o}function oe(e,t,n,r){if(!r){c.redraw.strategy("all"),c.startComputation(),Fe[n]=t;var o;o=ze=e?e:e={controller:i};var a=new(e.controller||i);return o===ze&&(Ge[n]=a,$e[n]=e),ue(),null===e&&ie(t,n),Ge[n]}null==e&&ie(t,n)}function ie(e,t){Fe.splice(t,1),Ge.splice(t,1),$e.splice(t,1),he(e),Be.splice(te(e),1)}function ae(){Ye&&(Ye(),Ye=null),d(Fe,function(e,t){var n=$e[t];if(Ge[t]){var r=[Ge[t]];c.render(e,n.view?n.view(Ge[t],r):"")}}),Ve&&(Ve(),Ve=null),Je=null,Ke=new Date,c.redraw.strategy("diff")}function ue(){"none"===c.redraw.strategy()?(je--,c.redraw.strategy("diff")):c.endComputation()}function se(e){return e.slice(et[c.route.mode].length)}function le(e,t,n){Xe={};var r=n.indexOf("?");r!==-1&&(Xe=pe(n.substr(r+1,n.length)),n=n.substr(0,r));var o=Object.keys(t),i=o.indexOf(n);if(i!==-1)return c.mount(e,t[o[i]]),!0;for(var a in t)if(De.call(t,a)){if(a===n)return c.mount(e,t[a]),!0;var u=new RegExp("^"+a.replace(/:[^\/]+?\.{3}/g,"(.*?)").replace(/:[^\/]+/g,"([^\\/]+)")+"/?$");if(u.test(n))return n.replace(u,function(){var n=a.match(/:[^\/]+/g)||[],r=[].slice.call(arguments,1,-2);d(n,function(e,t){Xe[e.replace(/:|\./g,"")]=decodeURIComponent(r[t])}),c.mount(e,t[a])}),!0}}function ce(e){if(e=e||event,!(e.ctrlKey||e.metaKey||e.shiftKey||2===e.which)){e.preventDefault?e.preventDefault():e.returnValue=!1;var t,n=e.currentTarget||e.srcElement;for(t="pathname"===c.route.mode&&n.search?pe(n.search.slice(1)):{};n&&!/a/i.test(n.nodeName);)n=n.parentNode;je=0,c.route(n[c.route.mode].slice(et[c.route.mode].length),t)}}function de(){"hash"!==c.route.mode&&Ce.hash?Ce.hash=Ce.hash:e.scrollTo(0,0)}function fe(e,n){var o={},i=[];for(var a in e)if(De.call(e,a)){var u=n?n+"["+a+"]":a,s=e[a];if(null===s)i.push(encodeURIComponent(u));else if(r(s))i.push(fe(s,u));else if(Ne(s)){var l=[];o[u]=o[u]||{},d(s,function(e){o[u][e]||(o[u][e]=!0,l.push(encodeURIComponent(u)+"="+encodeURIComponent(e)))}),i.push(l.join("&"))}else s!==t&&i.push(encodeURIComponent(u)+"="+encodeURIComponent(s))}return i.join("&")}function pe(e){if(""===e||null==e)return{};"?"===e.charAt(0)&&(e=e.slice(1));var t=e.split("&"),n={};return d(t,function(e){var t=e.split("="),r=decodeURIComponent(t[0]),o=2===t.length?decodeURIComponent(t[1]):null;null!=n[r]?(Ne(n[r])||(n[r]=[n[r]]),n[r].push(o)):n[r]=o}),n}function he(e){var n=te(e);Y(e.childNodes,He[n]),He[n]=t}function ve(e,t){var n=c.prop(t);return e.then(n),n.then=function(n,r){return ve(e.then(n,r),t)},n.catch=n.then.bind(null,null),n}function me(e,t){function o(e){s=e||at,d.map(function(e){s===it?e.resolve(l):e.reject(l)})}function i(e,t,o,i){if((null!=l&&r(l)||n(l))&&n(e))try{var a=0;e.call(l,function(e){a++||(l=e,t())},function(e){a++||(l=e,o())})}catch(e){c.deferred.onerror(e),l=e,o()}else i()}function a(){var r;try{r=l&&l.then}catch(e){return c.deferred.onerror(e),l=e,s=ot,a()}s===ot&&c.deferred.onerror(l),i(r,function(){s=rt,a()},function(){s=ot,a()},function(){try{s===rt&&n(e)?l=e(l):s===ot&&n(t)&&(l=t(l),s=rt)}catch(e){return c.deferred.onerror(e),l=e,o()}l===u?(l=TypeError(),o()):i(r,function(){o(it)},o,function(){o(s===rt&&it)})})}var u=this,s=0,l=0,d=[];u.promise={},u.resolve=function(e){return s||(l=e,s=rt,a()),u},u.reject=function(e){return s||(l=e,s=ot,a()),u},u.promise.then=function(e,t){var n=new me(e,t);return s===it?n.resolve(l):s===at?n.reject(l):d.push(n),n.promise}}function ge(e){return e}function we(n){var r=n.callbackName||"mithril_callback_"+(new Date).getTime()+"_"+Math.round(1e16*Math.random()).toString(36),o=Ee.createElement("script");e[r]=function(i){o.parentNode.removeChild(o),n.onload({type:"load",target:{responseText:i}}),e[r]=t},o.onerror=function(){return o.parentNode.removeChild(o),n.onerror({type:"error",target:{status:500,responseText:JSON.stringify({error:"Error making jsonp request"})}}),e[r]=t,!1},o.onload=function(){return!1},o.src=n.url+(n.url.indexOf("?")>0?"&":"?")+(n.callbackKey?n.callbackKey:"callback")+"="+r+"&"+fe(n.data||{}),Ee.body.appendChild(o)}function ye(t){var r=new e.XMLHttpRequest;if(r.open(t.method,t.url,!0,t.user,t.password),r.onreadystatechange=function(){4===r.readyState&&(r.status>=200&&r.status<300?t.onload({type:"load",target:r}):t.onerror({type:"error",target:r}))},t.serialize===JSON.stringify&&t.data&&"GET"!==t.method&&r.setRequestHeader("Content-Type","application/json; charset=utf-8"),t.deserialize===JSON.parse&&r.setRequestHeader("Accept","application/json, text/*"),n(t.config)){var i=t.config(r,t);null!=i&&(r=i)}var a="GET"!==t.method&&t.data?t.data:"";if(a&&!o(a)&&a.constructor!==e.FormData)throw new Error("Request data should be either be a string or FormData. Check the `serialize` option in `m.request`");return r.send(a),r}function be(e){return e.dataType&&"jsonp"===e.dataType.toLowerCase()?we(e):ye(e)}function ke(e,t,n){if("GET"===e.method&&"jsonp"!==e.dataType){var r=e.url.indexOf("?")<0?"?":"&",o=fe(t);e.url+=o?r+o:""}else e.data=n(t)}function xe(e,t){return t&&(e=e.replace(/:[a-z]\w+/gi,function(e){var n=e.slice(1),r=t[n]||e;return delete t[n],r})),e}c.version=function(){return"v0.2.5"};var Ee,Ce,Se,Te,De={}.hasOwnProperty,Le={}.toString,Ne=Array.isArray||function(e){return"[object Array]"===Le.call(e)},Pe={AREA:1,BASE:1,BR:1,COL:1,COMMAND:1,EMBED:1,HR:1,IMG:1,INPUT:1,KEYGEN:1,LINK:1,META:1,PARAM:1,SOURCE:1,TRACK:1,WBR:1};c.deps=function(t){return a(e=t||window),e},c.deps(e);var Ie=1,Oe=2,Ae=3,je=0;c.startComputation=function(){je++},c.endComputation=function(){je>1?je--:(je=0,c.redraw())};var _e,Re=[],Me=!1,qe={list:1,style:1,form:1,type:1,width:1,height:1},Ue={appendChild:function(e){_e===t&&(_e=Ee.createElement("html")),Ee.documentElement&&Ee.documentElement!==e?Ee.replaceChild(e,Ee.documentElement):Ee.appendChild(e),this.childNodes=Ee.childNodes},insertBefore:function(e){this.appendChild(e)},childNodes:[]},Be=[],He={};c.render=function(e,n,r){if(!e)throw new Error("Ensure the DOM element being passed to m.route/m.mount/m.render is not undefined.");var o,i=[],a=te(e),u=e===Ee;o=u||e===Ee.documentElement?Ue:e,u&&"html"!==n.tag&&(n={tag:"html",attrs:{},children:n}),He[a]===t&&Y(o.childNodes),r===!0&&he(e),He[a]=z(o,null,t,t,n,He[a],!1,0,null,t,i),d(i,function(e){e()})},c.trust=function(e){return e=new String(e),e.$trusted=!0,e},c.prop=function(e){return(null!=e&&(r(e)||n(e))||"undefined"!=typeof Promise&&e instanceof Promise)&&n(e.then)?ve(e):ne(e)};var ze,Fe=[],$e=[],Ge=[],Je=null,Ke=0,Ye=null,Ve=null,Qe=16;c.component=function(e){for(var t=new Array(arguments.length-1),n=1;n<arguments.length;n++)t[n-1]=arguments[n];return re(e,t)},c.mount=c.module=function(e,t){if(!e)throw new Error("Please ensure the DOM element exists before rendering a template into it.");var r=Fe.indexOf(e);r<0&&(r=Fe.length);var o=!1,i={preventDefault:function(){o=!0,Ye=Ve=null}};return d(Re,function(e){e.handler.call(e.controller,i),e.controller.onunload=null}),o?d(Re,function(e){e.controller.onunload=e.handler}):Re=[],Ge[r]&&n(Ge[r].onunload)&&Ge[r].onunload(i),oe(t,e,r,o)};var We=!1;c.redraw=function(t){if(!We){We=!0,t&&(Me=!0);try{Je&&!t?(Se===e.requestAnimationFrame||new Date-Ke>Qe)&&(Je>0&&Te(Je),Je=Se(ae,Qe)):(ae(),Je=Se(function(){Je=null},Qe))}finally{We=Me=!1}}},c.redraw.strategy=c.prop(),c.withAttr=function(e,t,n){return function(r){r=r||window.event;var o=r.currentTarget||this,i=n||this,a=e in o?o[e]:o.getAttribute(e);t.call(i,a)}};var Xe,Ze,et={pathname:"",hash:"#",search:"?"},tt=i,nt=!1;c.route=function(t,n,r,i){if(0===arguments.length)return Ze;if(3===arguments.length&&o(n)){tt=function(e){var o=Ze=se(e);if(!le(t,r,o)){if(nt)throw new Error("Ensure the default route matches one of the routes defined in m.route");nt=!0,c.route(n,!0),nt=!1}};var a="hash"===c.route.mode?"onhashchange":"onpopstate";return e[a]=function(){var e=Ce[c.route.mode];"pathname"===c.route.mode&&(e+=Ce.search),Ze!==se(e)&&tt(e)},Ye=de,void e[a]()}if(t.addEventListener||t.attachEvent){var u="pathname"!==c.route.mode?Ce.pathname:"";return t.href=u+et[c.route.mode]+i.attrs.href,void(t.addEventListener?(t.removeEventListener("click",ce),t.addEventListener("click",ce)):(t.detachEvent("onclick",ce),t.attachEvent("onclick",ce)))}if(o(t)){var s=Ze;Ze=t;var l,d=n||{},f=Ze.indexOf("?");l=f>-1?pe(Ze.slice(f+1)):{};for(var p in d)De.call(d,p)&&(l[p]=d[p]);var h,v=fe(l);h=f>-1?Ze.slice(0,f):Ze,v&&(Ze=h+(h.indexOf("?")===-1?"?":"&")+v);var m=(3===arguments.length?r:n)===!0||s===t;if(e.history.pushState){var g=m?"replaceState":"pushState";Ye=de,Ve=function(){try{e.history[g](null,Ee.title,et[c.route.mode]+Ze)}catch(e){Ce[c.route.mode]=Ze}},tt(et[c.route.mode]+Ze)}else Ce[c.route.mode]=Ze,tt(et[c.route.mode]+Ze)}},c.route.param=function(e){if(!Xe)throw new Error("You must call m.route(element, defaultRoute, routes) before calling m.route.param()");return e?Xe[e]:Xe},c.route.mode="search",c.route.buildQueryString=fe,c.route.parseQueryString=pe,c.deferred=function(){var e=new me;return e.promise=ve(e.promise),e};var rt=1,ot=2,it=3,at=4;return c.deferred.onerror=function(e){if("[object Error]"===Le.call(e)&&!/ Error/.test(e.constructor.toString()))throw je=0,e},c.sync=function(e){function t(e,t){return function(a){return o[e]=a,t||(i="reject"),0===--r&&(n.promise(o),n[i](o)),a}}var n=c.deferred(),r=e.length,o=[],i="resolve";return e.length>0?d(e,function(e,n){e.then(t(n,!0),t(n,!1))}):n.resolve([]),n.promise},c.request=function(e){e.background!==!0&&c.startComputation();var t,n,r,o=new me,i=e.dataType&&"jsonp"===e.dataType.toLowerCase();return i?(t=e.serialize=n=e.deserialize=ge,r=function(e){return e.responseText}):(t=e.serialize=e.serialize||JSON.stringify,n=e.deserialize=e.deserialize||JSON.parse,r=e.extract||function(e){return e.responseText.length||n!==JSON.parse?e.responseText:null}),e.method=(e.method||"GET").toUpperCase(),e.url=xe(e.url,e.data),ke(e,e.data,t),e.onload=e.onerror=function(t){try{t=t||event;var i=n(r(t.target,e));"load"===t.type?(e.unwrapSuccess&&(i=e.unwrapSuccess(i,t.target)),Ne(i)&&e.type?d(i,function(t,n){i[n]=new e.type(t)}):e.type&&(i=new e.type(i)),o.resolve(i)):(e.unwrapError&&(i=e.unwrapError(i,t.target)),o.reject(i))}catch(e){o.reject(e),c.deferred.onerror(e)}finally{e.background!==!0&&c.endComputation()}},be(e),o.promise=ve(o.promise,e.initialValue),o.promise},c})}),d=(function(){function e(e){this.value=e}function t(t){function n(e,t){return new Promise(function(n,o){var u={key:e,arg:t,resolve:n,reject:o,next:null};a?a=a.next=u:(i=a=u,r(e,t))})}function r(n,i){try{var a=t[n](i),u=a.value;u instanceof e?Promise.resolve(u.value).then(function(e){r("next",e)},function(e){r("throw",e)}):o(a.done?"return":"normal",a.value)}catch(e){o("throw",e)}}function o(e,t){switch(e){case"return":i.resolve({value:t,done:!0});break;case"throw":i.reject(t);break;default:i.resolve({value:t,done:!1})}i=i.next,i?r(i.key,i.arg):a=null}var i,a;this._invoke=n,"function"!=typeof t.return&&(this.return=void 0)}return"function"==typeof Symbol&&Symbol.asyncIterator&&(t.prototype[Symbol.asyncIterator]=function(){return this}),t.prototype.next=function(e){return this._invoke("next",e)},t.prototype.throw=function(e){return this._invoke("throw",e)},t.prototype.return=function(e){return this._invoke("return",e)},{wrap:function(e){return function(){return new t(e.apply(this,arguments))}},await:function(t){return new e(t)}}}(),function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}),f=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),p=function(){function e(t){d(this,e),this.ID=c.prop(t.ID),this.airDate=c.prop(new Date(t.air_date)),this.name=c.prop(t.Name),this.overview=c.prop(t.Overview),this.episodeNumber=c.prop(t.episode_number),this.guestStars=c.prop(t.guest_stars),this.productionCode=c.prop(t.production_code),this.seasonNumber=c.prop(t.season_number),this.voteAverage=c.prop(t.vote_average),this.voteCount=c.prop(t.vote_count),this.stillPath=t.still_path}return f(e,[{key:"renderStars",value:function(){var e=Math.round(this.voteAverage())/2;return t(e)}},{key:"friendlyAirDate",value:function(){var e=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],t=this.airDate(),n=t.getDate(),r=t.getMonth(),o=t.getFullYear();return n+" "+e[r]+" "+o}},{key:"friendlySeasonNumber",value:function(){return"Episode "+this.seasonNumber()}},{key:"getPosterPath",value:function(e){return e||(e=150),"https://image.tmdb.org/t/p/w"+e+this.stillPath}}]),e}(),h=function(){function e(t,n){d(this,e),this.ID=c.prop(t.ID),this.airDate=c.prop(new Date(t.air_date)),this.seasonNumber=c.prop(t.season_number),this.posterPath=t.poster_path,this.overview=c.prop(t.Overview),this.isFinished=!0;var r=t.episode_count,o=t.Episodes||[];if(o.length>0){r=o.length,o=o.map(function(e){return new p(e)});var i=o[o.length-1];i.airDate()>new Date&&(this.isFinished=!1)}this.episodes=c.prop(o),this.episodeCount=c.prop(r),n&&(this.showID=n.ID(),this.showName=n.name())}return f(e,[{key:"friendlySeasonNumber",value:function(){return"Season "+this.seasonNumber()}},{key:"getPosterPath",value:function(e){return e||(e=150),"https://image.tmdb.org/t/p/w"+e+this.posterPath}},{key:"getRoute",value:function(e){return"/"+e+"/shows/"+this.showID+"/"+encodeURIComponent(this.showName)+"/season/"+this.seasonNumber()+"/"}}]),e}(),v=function(){function e(t){var n=this;d(this,e),this.ID=c.prop(t.ID);var r=t.Name||t.Title;this.name=c.prop(r),this.voteAverage=c.prop(t.vote_average),this.posterPath=t.poster_path,this.overview=c.prop(t.Overview),this.backdropPath=t.backdrop_path;var o=t.first_air_date||t.release_date;this.releaseDate=new Date(o);var i=t.Seasons||[];i=i.map(function(e){return new h(e,n)}),this.seasons=c.prop(i)}return f(e,[{key:"renderStars",value:function(){var e=Math.round(this.voteAverage())/2;return t(e)}},{key:"getRoute",value:function(e,t){var n=this;return"/"+e+"/"+t+"/"+n.ID()+"/"+encodeURIComponent(n.name())}},{key:"getYear",value:function(){var e=this,t=e.releaseDate.getFullYear();return t?t:""}},{key:"getPosterPath",value:function(e){return e||(e=150),"https://image.tmdb.org/t/p/w"+e+this.posterPath}},{key:"getBackgroundPath",value:function(e){return e||(e=150),"https://image.tmdb.org/t/p/w"+e+this.backdropPath}},{key:"getBackgroundImageStyle",value:function(){var e=this;return'background-image: url("'+e.getBackgroundPath(500)+'")'}},{key:"routeTomedia",value:function(e){c.route(this.getmediaRoute(e))}}]),e}(),m={create:function(e,t){return c.request({method:"POST",url:"/"+n(e)+"/Add/",data:t})},retrieve:function(e,t){return c.request({method:"GET",url:"/"+n(e)+"/View/"+t+"/",type:v})},trending:function(e){return c.request({method:"GET",url:"/"+n(e)+"/Trending/",type:v})},search:function(e,t){var r=c.prop(),o=c.request({method:"GET",url:"/Search/"+n(e)+"/"+encodeURIComponent(t)+"/",config:r,type:v});return{xhrHandle:r,req:o}},update:function(e){return c.request({method:"PATCH",url:this.url,data:e})},delete:function(e){return c.request({method:"DELETE",url:this.url,data:e})}},g=function e(t){d(this,e),this.vm=new w(t),this.vm.loadMedia()},w=function(){function e(t){d(this,e),this.pageLevel=t.pageLevel,this.type=c.route.param("type"),this.media=c.prop([])}return f(e,[{key:"loadMedia",value:function(){var e=this;m.trending(e.type).then(e.media)}}]),e}(),y=(e(function(e,t){function n(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var r=c,o=n(r),i="default",a=360,u="ltr",s="rtl",l=1,d="forward",f=-1,p="backward",h={},v={},m=["webkit","moz","ms","o",""],g=function(e,t,n){for(var r=0;r<m.length;r++)m[r]||(t=t.toLowerCase()),e.addEventListener(m[r]+t,n,!1)},w=function(){var e=o.default.prop({});return{pageElements:{},transition:e,clearTransition:function(){e().page=void 0},hasTransition:function(){return void 0!==e().page},orientation:o.default.prop(u),current:o.default.prop(),currentId:o.default.prop(),previous:o.default.prop(),next:o.default.prop(),history:o.default.prop({}),depth:o.default.prop(0)}},y=function(){var e=arguments.length<=0||void 0===arguments[0]?i:arguments[0];return h[e]=h[e]||new w,h[e]},b=function(e,t,n,r,o){return{key:t,class:o.pageClass||null,config:function(t,n){n||(r.pageElements[e]=t)},style:{"-webkit-animation-duration":n+"ms","animation-duration":n+"ms"}}},k=function(e){var t=e.slider||i,n=y(t);if(!n.hasTransition()){var r=e.route||o.default.route(),c=e.id||r,d=n.currentId();if(void 0===d||d!==c||!n.current()){var p={page:e.page,id:c,route:r,done:e.done,direction:e.direction||l,duration:e.duration||a};if(n.orientation(e.rtl?s:u),n.current()){var h=n.depth(),v=n.history()[r],m=void 0!==v?v:h+p.direction,g=e.direction===f||m<h;n.depth(m),n.history()[r]=m,g?(p.direction=f,n.previous(p.page)):(p.direction=l,n.next(p.page)),n.transition(p)}else n.current(p.page),n.currentId(p.id),n.history()[p.route]=0,p.done&&p.done(),n.clearTransition();o.default.redraw()}}},x=function(e){var t=e.transition(),n=t.route,r=t.done;e.current(t.page),e.currentId(t.id),t.direction===f?(e.next(e.current()),e.previous(null)):(e.previous(e.current()),e.next(null)),e.clearTransition(),o.default.route(n),r&&r()},E=function(e,t){var n=y(t),r=n.previous(),i=n.current(),u=n.next(),c=n.transition(),f=n.hasTransition(),h=n.orientation(),v=void 0!==c.duration?c.duration:a,m=c.direction===l?d:p,w=[r?(0,o.default)(".page.previous",b("previous",1,v,n,e),r):null,i?(0,o.default)(".page.current",b("current",2,v,n,e),i):null,u?(0,o.default)(".page.next",b("next",3,v,n,e),u):null];return h===s&&w.reverse(),(0,o.default)("div",{class:["pageSlider",f?"animating":null,m,h,e.class||null].join(" "),config:function(){if(f){var e=function(){x(n)};g(n.pageElements.current,"AnimationEnd",e)}}},w)},C=function(e,t){return function(n,r){r||(n.onclick=function(r){r.preventDefault(),t.route=n.getAttribute("href"),e(t)})}};v.slideInConfig=function(e){return C(v.slideIn,e)},v.slideOutConfig=function(e){return C(v.slideOut,e)},v.slideIn=function(e){e.direction=l,k(e)},v.slideOut=function(e){e.direction=f,k(e)},v.view=function(e){var t=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],n=t.slider||i,r=y(n);if(!r.hasTransition()){var o=t.page;o&&k({slider:n,page:o,id:t.id,route:t.route,done:t.done,rtl:t.rtl})}return E(t,n)},t.default=v}),{download:function(e,t,n){var o="/Downloads/show/"+r(e)+"/season/"+t;return n&&(o+="/episode/"+n),c.request({method:"POST",url:o})}}),b=function(){function e(t){d(this,e),this.vm=new k(t),this.loadMedia()}return f(e,[{key:"loadMedia",value:function(){var e=this.vm;m.retrieve(e.type,e.id).then(function(t){e.media(t)},function(){e.media({})})}},{key:"addMedia",value:function(){var e=this.vm;e.status("pending"),c.redraw(),m.create(e.type,e.media()).then(function(){e.status("complete"),e.hideDownload(!0)},function(){e.status("failed"),e.hideDownload(!0)})}},{key:"downloadSeason",value:function(){var e=this.vm;e.status("pending"),c.redraw(),y.download(e.media().name(),1,"").then(function(){e.status("complete"),e.hideDownload(!0)},function(){e.status("failed"),e.hideDownload(!0)})}}]),e}(),k=function e(t){d(this,e),this.type=c.route.param("type"),this.parent=c.route.param("parent"),this.id=c.route.param("id")||188927,this.name=c.route.param("name")||"Star Trek Beyond",this.media=c.prop({}),this.status=c.prop(""),this.pageLevel=t.pageLevel,this.hideDownload=c.prop(!1)},x={view:function(e,t){return"pending"===t.status?c("div.overlay.progress-spinner.flex-valign",[c("div.space--top"),c("div.overlay-inner",[c("div.loader")]),c("div.space--bottom")]):"complete"===t.status?c("div.overlay.progress-spinner.flex-valign",{config:o},[c("div.space--top"),c("div.overlay-inner",[c("i.fa fa-check")]),c("div.space--bottom")]):"failed"===t.status?c("div.overlay.progress-spinner.flex-valign",{
config:o},[c("div.space--top"),c("div.overlay-inner",[c("i.fa.fa-times")]),c("div.space--bottom")]):c("div")}},E=function(e,t){var n=e.vm.media();console.log(n);var r=[],o="undefined"!=typeof n.name();return t.hideDownload()||("movies"===t.type?r.push(c("button.btn.btn-primary.bot-margin.right-margin",{onclick:function(){e.addMedia()}},"Download")):(r.push(c("button.btn.btn-primary.bot-margin.right-margin",{onclick:function(){e.downloadSeason()}},"Download Season 1")),r.push(c("button.btn.btn-secondary","Subscribe")))),c("div#media-view.wrap",{pageLevel:t.pageLevel},[c("header.bar.bar-nav.not-fixed",[c("a.btn.btn-link.btn-nav.pull-left",{href:"/"+t.parent+"/"+t.type,config:c.route},[c("span.icon.icon-left"),"Back"]),c("h1.title",t.name)]),c(x,{status:e.vm.status()}),c("div.content.multimedia",function(){return o?[c("div.content-padded",[c("div.cf",[c("img.media-object.pull-left",{src:n.getPosterPath(150)}),c("div.info.pull-left",[c("h3",n.name()),function(){if("movies"===t.type)return c("h5.grey.year",n.getYear())}(),c("div.stars",n.renderStars()),c("div.btn-block",r)])]),c("div.summary.top-bot-pad",n.overview())]),function(){if(n.seasons().length>0)return c("ul.table-view.seasons",n.seasons().map(function(e){if(e.seasonNumber()>0)return c("li.table-view-cell",c("a.grey.navigate-right",{href:e.getRoute(t.parent),config:c.route},"Season "+e.seasonNumber()))}))}()]:[c("div.content-padded",[c("div","loading..")])]}())])},C={controller:function(e){return window.globals.currentPageLevel=e.pageLevel,new b(e)},view:function(e){return console.log("asdfasdf asdfasd ",e.vm),E(e,e.vm)}},S={view:function(e,t){var n=t.media;return c("li.multimedia.table-view-cell media",{style:n.getBackgroundImageStyle(500)},[c("a.media-body.push-right",{href:n.getRoute(t.parent,t.type),config:c.route},[c("div.pull-left",[c("h3.grey",n.name()),c("h5.grey.year",n.getYear()),c("div.stars",n.renderStars())])])])}},T={view:function(e,t){var n=t.type||c.route.param("type");return c("div.segmented-control",[c("a.control-item",{class:"shows"===n?"active":"",text:"Shows",href:"/"+t.view+"/shows",config:c.route}),c("a.control-item",{class:"movies"===n?"active":"",text:"Movies",href:"/"+t.view+"/movies",config:c.route})])}},D={view:function(e,t){return c("a.tab-item",{class:t.isActiveClass,href:t.link,config:c.route},[c("span.fa.fa-"+t.icon),c("span.tab-label",t.text)])}},L={view:function(e,t){var n=t.type||c.route.param("type")||"shows",r=function(e){return e.isActiveClass="",t.title&&t.title===e.text&&(e.isActiveClass="active"),e};return c("nav.bar.bar-tab",[c(D,r({icon:"globe",link:"/trending/"+n,text:"Explore"})),c(D,r({icon:"search",link:"/search/"+n,text:"Search"})),c(D,r({icon:"download",link:"/downloads",text:"Downloads"}))])}},N=function(e,t){return c("div#trending-view.wrap",{pageLevel:t.pageLevel},[c("header.bar.bar-nav.not-fixed",[c(T,{view:"trending",type:t.type})]),c(L,{title:"Explore",type:t.type}),c("div.content",[c("ul.table-view.no-margin",[t.media().map(function(e){return c(S,{media:e,type:t.type,parent:"trending"})})])])])},P={controller:function(e){return window.globals.currentPageLevel=e.pageLevel,new g(e)},view:function(e,t){return N(e,e.vm)}},I=function(){function e(t){d(this,e),this.vm=new O(t)}return f(e,[{key:"init",value:function(){}},{key:"search",value:function(e){var t=this.vm;t.searchText(e);var n=t.xhrHandle,r=t.lastSearchTime;t.type;e&&e.length>3&&(null==r||new Date-r>2e3)&&(clearTimeout(t.timeoutHandle),t.timeoutHandle=setTimeout(function(){n&&1===n().readyState&&n().abort(),r=new Date;var e=m.search(t.type,t.searchText());n=e.xhrHandle,e.req.then(t.media,function(){t.media([])})},700))}}]),e}(),O=function e(t){d(this,e),this.media=c.prop([]),this.searchText=c.prop(""),this.lastSearchTime=null,this.xhrHandle=null,this.timeoutHandle=null,this.type=c.route.param("type"),this.pageLevel=t.pageLevel},A=function(e,t){return c("div#trending-view.wrap",{pageLevel:t.pageLevel},[c("header.bar.bar-nav.not-fixed",[c(T,{view:"search",type:t.type})]),c("div.bar.bar-standard.bar-header-secondary",[c('input[type="text"].u-full-width',{placeholder:"Search",oninput:c.withAttr("value",function(t){e.search(t)}),value:e.vm.searchText()})]),c(L,{title:"Search",type:t.type}),c("div.content",[c("ul.table-view.no-margin",[t.media().map(function(e){return c(S,{media:e,type:t.type,parent:"trending"})})])])])},j={controller:function(e){return window.globals.currentPageLevel=e.pageLevel,new I(e)},view:function(e,t){return A(e,e.vm)}},_=function(){function e(t,n){d(this,e),this.ID=c.prop(t.ID),this.airDate=c.prop(new Date(t.air_date)),this.seasonNumber=c.prop(t.season_number),this.posterPath=t.poster_path,this.overview=c.prop(t.Overview),this.isFinished=!0;var r=t.episode_count,o=t.Episodes||[];if(o.length>0){r=o.length,o=o.map(function(e){return new p(e)});var i=o[o.length-1];i.airDate()>new Date&&(this.isFinished=!1)}this.episodes=c.prop(o),this.episodeCount=c.prop(r),n&&(this.showID=n.ID(),this.showName=n.name())}return f(e,[{key:"friendlySeasonNumber",value:function(){return"Season "+this.seasonNumber()}},{key:"getPosterPath",value:function(e){return e||(e=150),"https://image.tmdb.org/t/p/w"+e+this.posterPath}},{key:"getRoute",value:function(e){return"/"+e+"/shows/"+this.showID+"/"+encodeURIComponent(this.showName)+"/season/"+this.seasonNumber()+"/"}}]),e}(),R={retrieve:function(e,t){return c.request({method:"GET",url:"/Shows/"+e+"/Season/"+t+"/",type:_})}},M=function(){function e(t){d(this,e),this.vm=new q(t),this.loadSeason()}return f(e,[{key:"loadSeason",value:function(){var e=this.vm;R.retrieve(e.showID,e.seasonNum).then(function(t){e.season(t)},function(t){e.season({})})}},{key:"downloadSeason",value:function(e){this.downloadEpisode("")}},{key:"downloadEpisode",value:function(e){var t=this.vm;t.status("pending"),c.redraw(),y.download(t.showName,t.seasonNum,e).then(function(){t.status("complete"),t.hideDownload(!0)},function(){t.status("failed"),t.hideDownload(!0)})}}]),e}(),q=function e(t){d(this,e),this.type=c.route.param("type"),this.parent=c.route.param("parent"),this.showID=c.route.param("showid"),this.showName=c.route.param("showname"),this.seasonNum=c.route.param("seasonnum"),this.season=c.prop({}),this.status=c.prop(""),this.pageLevel=t.pageLevel,this.hideDownload=c.prop(!1)},U=function(e,t){var n=e.vm.season(),r=[];return t.hideDownload()||r.push(c("button.btn.btn-primary.bot-margin.right-margin",{onclick:function(){e.downloadSeason()}},"Download Season "+n.seasonNumber())),r.push(c("button.btn.btn-secondary","Subscribe")),c("div#season-view.wrap",{pageLevel:t.pageLevel},[c("header.bar.bar-nav.not-fixed",[c("a.btn.btn-link.btn-nav.pull-left",{href:"#",onclick:function(){history.back()},config:c.route},[c("span.icon.icon-left"),"Back"]),c("h1.title",t.name)]),c(x,{status:e.vm.status()}),c("div.content.multimedia",[c("div.content-padded",[c("div.cf",[c("img.media-object.pull-left",{src:n.getPosterPath(150)}),c("div.info.pull-left",[c("h3",n.friendlySeasonNumber()),function(){if("movies"===t.type)return c("h5.grey.year",n.getYear())}(),c("div.btn-block",r)])]),c("div.summary.top-bot-pad",n.overview())]),function(){if(n.episodes().length>0)return c("ul.table-view.episodes",n.episodes().map(function(t){if(t.seasonNumber()>0)return c("li.table-view-cell",[c("h4",t.name()),c("div.cf",[c("h5.pull-left.grey.year","Ep "+t.episodeNumber()+" - "+t.friendlyAirDate()),c("div.pull-right.stars",t.renderStars())]),c("p",t.overview()),c("div",function(){if(t.airDate()<new Date)return[c("a.btn.btn-primary.top-margin",{href:"#",onclick:function(){return e.downloadEpisode(t.episodeNumber()),!1}},"Download")]}())])}))}()])])},B={controller:function(e){return window.globals.currentPageLevel=e.pageLevel,new M(e)},view:function(e){return U(e,e.vm)}},H=function(e,t){var n=t.downloads(),r=t.searchText().toUpperCase();return r&&(n=n.filter(function(e){var t=e.name.toUpperCase();return t.indexOf(r)>=0})),n.sort(function(e,t){var n=e.name.toUpperCase(),r=t.name.toUpperCase();return n<r?-1:n>r?1:0}),c("div#media-view.wrap",{pageLevel:t.pageLevel},[c("header.bar.bar-nav",[c("a.btn.btn-link.btn-nav.pull-left",{href:c.lastRoute,config:c.route},[c("span.icon.icon-left"),"Back"]),c("h1.title",e.vm.title)]),c("div.bar.bar-standard.bar-header-secondary",[c('input[type="text"].u-full-width',{placeholder:"Search",oninput:c.withAttr("value",function(t){e.search(t)}),value:e.vm.searchText()})]),c.component(L,{title:"Downloads"}),c("div.content",[c("ul.table-view.no-margin",[n.map(function(e){return c("li.table-view-cell",[c("h5.no-margin-top",e.name),c("p","Ratio: "+e.ratio),c("p","Size: "+e.size+"MB"),c("p","Completed: "+(e.completed?"yes":"no"))])})])])])},z=function e(t){d(this,e);var n=this;return n.hash=t.hash,n.name=(t.name+"").split(".").join(" "),n.path=t.path,n.size=+(parseInt(t.size)/1024/1024).toFixed(0),n.label=t.label,n.completed=t.completed,n.ratio=t.ratio,n},F={url:"/Downloads/",create:function(e){return c.request({method:"POST",url:this.url,type:z})},retrieve:function(e){return c.request({method:"GET",url:this.url,type:z})},update:function(e){return c.request({method:"PATCH",url:this.url,data:e})},delete:function(e){return c.request({method:"DELETE",url:this.url,data:e})}},G=function(){function e(t){d(this,e);var n=new J(t);return this.vm=n,setInterval(function(){F.retrieve().then(n.downloads)},1e4),F.retrieve().then(n.downloads),this}return f(e,[{key:"search",value:function(e){this.vm.searchText(e)}}]),e}(),J=function e(t){d(this,e),this.downloads=c.prop([]),this.pageLevel=t.pageLevel,this.searchText=c.prop("")},K={controller:function(e){return window.globals.currentPageLevel=e.pageLevel,new G(e)},view:function(e,t){return H(e,e.vm)}},Y=!1;window.globals={};var V=i(u,s),Q={"/trending/:type":V(c(P,{pageLevel:1})),"/downloads":V(c(K,{pageLevel:1})),"/search/:type":V(c(j,{pageLevel:1})),"/:parent/:type/:id/:name":V(c(C,{pageLevel:2})),"/:parent/:type/:showid/:showname/season/:seasonnum":V(c(B,{pageLevel:3})),"/:parent/:type/:showid/:showname/season/:seasonnum/:isLast":V(c(B,{pageLevel:3}))};c.route.mode="hash",c.route(document.getElementById("main"),"/trending/movies",Q)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
